using System.Text;
using CodeChops.ImplementationDiscovery.SourceGeneration.Models;

namespace CodeChops.ImplementationDiscovery.SourceGeneration.SourceBuilders;

internal static class ImplementationsEnumSourceBuilder
{
	/// <summary>
	/// Creates a partial record of the enum definition which includes the discovered enum members. It also generates an extension class for the explicit enum definitions.
	/// </summary>
	public static void CreateSource(SourceProductionContext context, IEnumerable<DiscoveredEnumMember> allDiscoveredMembers, 
		Dictionary<string, EnumDefinition> enumDefinitionsByIdentifier, AnalyzerConfigOptionsProvider configOptionsProvider)
	{
		if (enumDefinitionsByIdentifier.Count == 0) return;

		// Get the discovered members and their definition.
		// Exclude the members that have no definition, or the members that are discovered while their definition doesn't allow it.
		var relevantDiscoveredMembersByDefinitions = allDiscoveredMembers
			.GroupBy(member => enumDefinitionsByIdentifier.TryGetValue(member.EnumIdentifier, out var definition) ? definition : null)
			.Where(grouping => grouping.Key is not null)
			.ToDictionary(grouping => grouping.Key);

		foreach (var definition in enumDefinitionsByIdentifier.Values)
		{
			var relevantDiscoveredMembers = relevantDiscoveredMembersByDefinitions.TryGetValue(definition, out var members)
				? members.ToList()
				: new List<DiscoveredEnumMember>();

			CreateEnumFile(context, definition!, relevantDiscoveredMembers, configOptionsProvider);
		}
	}
	
	private static void CreateEnumFile(SourceProductionContext context, EnumDefinition definition, List<DiscoveredEnumMember> relevantDiscoveredMembers, 
		AnalyzerConfigOptionsProvider configOptionsProvider)
	{
		var code = new StringBuilder();

		// Place the members that are discovered in the enum definition file itself first. The order can be relevant because the value of enum members can be implicitly incremental.
		// Do a distinct on the file path and line position so the members will be deduplicated while typing their invocation.
		// Also do a distinct on the member name.		
		relevantDiscoveredMembers = relevantDiscoveredMembers
			.OrderByDescending(member => member.FilePath == definition.FilePath)
			.GroupBy(member => (member.FilePath, member.LinePosition))
			.Select(group => group.First())
			.GroupBy(member => member.Name)
			.Select(membersByName => membersByName.First())
			.ToList();

		var members = definition.MembersFromAttribute.Concat(relevantDiscoveredMembers).ToList();

		// Is used for correct enum member outlining.
		var longestMemberNameLength = members
			.Select(member => member.Name)
			.OrderByDescending(name => name.Length)
			.FirstOrDefault()?.Length ?? 0;

		// Create the whole source.
		code.Append($@"// <auto-generated />
#nullable enable
#pragma warning disable CS0109

{GetUsings()}
{GetNamespaceDeclaration()}
{GetImplementationIdProperty()}
{GetEnumRecord()}
{GetExtensionMethod()}
#nullable restore
");

		var enumCodeFileName = FileNameHelpers.GetFileName($"{definition.Namespace}.{definition.Name}", configOptionsProvider);
		context.AddSource(enumCodeFileName, SourceText.From(code.ToString(), Encoding.UTF8));
		return;

		
		string GetUsings()
		{
			var usings = definition.Usings.Concat(new[] { "using System;", "using CodeChops.ImplementationDiscovery;", $"using {definition.Namespace ?? "System"};" });
			
			return usings.Distinct().OrderBy(u => u).Aggregate(new StringBuilder(), (sb, u) => sb.AppendLine(u)).ToString();
		}

		// Creates the namespace definition of the location of the enum definition (or null if the namespace is not defined).
		string? GetNamespaceDeclaration()
		{
			if (definition.Namespace is null) return null;

			var code = $@"namespace {definition.Namespace};";
			return code;
		}


		string? GetImplementationIdProperty()
		{
			if (definition.BaseTypeDeclaration is null) return null;

			var code = new StringBuilder();

			code.AppendLine($@"
{definition.BaseTypeDeclaration} {definition.BaseTypeName} {(definition.GenerateImplementationIds ? $": global::CodeChops.ImplementationDiscovery.IHasDiscoverableImplementations<{definition.Name}{definition.TypeParameters}>" : null)}
{{");
				
			if (definition.BaseTypeTypeKind == TypeKind.Class && definition.GenerateImplementationIds)
			{
				code.AppendLine($@"
	public new static {definition.Name}{definition.TypeParameters} StaticImplementationId {{ get; }} = new {definition.Name}{definition.TypeParameters}();
	public new abstract {definition.Name}{definition.TypeParameters} ImplementationId {{ get; }}");
			}
			
			code.Append($@"
}}");

			return code.ToString();
		}
		
		
		// Creates the partial enum record (or null if the enum has no members).
		string GetEnumRecord()
		{
			var code = new StringBuilder();

			// Create the comments on the enum record.
			code.Append($@"
/// <summary>
/// <list type=""bullet"">");
			
			foreach (var member in members)
			{
				var outlineSpaces = new String(' ', longestMemberNameLength - member.Name.Length);
				
				code.Append($@"
/// <item><c><![CDATA[ {member.Name}{outlineSpaces} = {member.Value ?? "?"} ]]></c></item>");
			}
			
			code.Append($@"
/// </list>
/// </summary>");
			
			code.Append($@"
{definition.AccessModifier} partial record {definition.Name}{definition.TypeParameters} : ImplementationsEnum<{definition.Name}{definition.TypeParameters}, {definition.BaseTypeName}>
{definition.BaseTypeGenericConstraints}
{{	
");

			// Add the discovered members to the enum record.
			foreach (var member in members)
			{
				// Create the comment on the enum member.
				if (member.Value is not null)
				{
					code.Append($@"
	/// <summary>");

					if (member.Value is not null)
					{
						code.Append($@"
	/// <c><![CDATA[ (value: {member.Value}) ]]></c>");
					}

					code.Append($@"
	/// </summary>");
				}

				// Create the enum member itself.
				var outlineSpaces = new String(' ', longestMemberNameLength - member.Name.Length);

				code.Append(@$"
	public static {definition.Name}{definition.TypeParameters} {member.Name} {{ get; }} {outlineSpaces}= CreateMember(new global::CodeChops.ImplementationDiscovery.DiscoveredObject<{definition.BaseTypeName}>(typeof({member.Value})));
");
			}

			code.Append($@"
}}
");

			return code.ToString();
		}


		string GetExtensionMethod() => $@"
/// <summary>
/// Call this method in order to create discovered enum members while invoking them (on the fly). So enum members are automatically deleted when not being used.
/// </summary>
{definition.AccessModifier} static class {definition.Name}Extensions
{{
	public static {definition.Name}{definition.TypeParameters} {ImplementationDiscoverySourceGenerator.GenerateMethodName}{definition.TypeParameters}(this {definition.Name}{definition.TypeParameters} member, {definition.BaseTypeName}? value = null, string? comment = null) 
	{definition.BaseTypeGenericConstraints}
		=> member;
}}
";
	}
}